diff --git a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
index 6053ac602de2b72ed0c405efafffae17868e7735..1c5f0a92e6d6717bb2beba78110483380de2c0c2 100644
--- a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
+++ b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
@@ -842,6 +842,7 @@ void RTCPeerConnection::Dispose() {
 ScriptPromise RTCPeerConnection::createOffer(ScriptState* script_state,
                                              const RTCOfferOptions* options,
                                              ExceptionState& exception_state) {
+  BRAVE_RTC_PEER_CONNECTION
   if (signaling_state_ ==
       webrtc::PeerConnectionInterface::SignalingState::kClosed) {
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError,
@@ -905,6 +906,7 @@ ScriptPromise RTCPeerConnection::CreateOffer(
   ExecutionContext* context = ExecutionContext::From(script_state);
   UseCounter::Count(
       context, WebFeature::kRTCPeerConnectionCreateOfferLegacyFailureCallback);
+  BRAVE_RTC_PEER_CONNECTION
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
 
@@ -966,6 +968,7 @@ ScriptPromise RTCPeerConnection::CreateOffer(
 ScriptPromise RTCPeerConnection::createAnswer(ScriptState* script_state,
                                               const RTCAnswerOptions* options,
                                               ExceptionState& exception_state) {
+  BRAVE_RTC_PEER_CONNECTION
   if (signaling_state_ ==
       webrtc::PeerConnectionInterface::SignalingState::kClosed) {
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError,
@@ -1028,6 +1031,7 @@ ScriptPromise RTCPeerConnection::CreateAnswer(
         context, WebFeature::kRTCPeerConnectionCreateAnswerLegacyCompliant);
   }
 
+  BRAVE_RTC_PEER_CONNECTION
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
 
@@ -1349,6 +1353,7 @@ ScriptPromise RTCPeerConnection::setLocalDescription(
   }
 
   DCHECK(script_state->ContextIsValid());
+  BRAVE_RTC_PEER_CONNECTION
   if (!session_description_init->hasType()) {
     return setLocalDescription(script_state);
   }
@@ -1414,6 +1419,7 @@ ScriptPromise RTCPeerConnection::setLocalDescription(
           WebFeature::
               kRTCPeerConnectionSetLocalDescriptionLegacyNoFailureCallback);
   }
+  BRAVE_RTC_PEER_CONNECTION
   String sdp;
   if (session_description_init->type() != "rollback") {
     DOMException* exception =
@@ -1473,6 +1479,7 @@ ScriptPromise RTCPeerConnection::setRemoteDescription(
   }
 
   DCHECK(script_state->ContextIsValid());
+  BRAVE_RTC_PEER_CONNECTION
   if (session_description_init->type() != "rollback") {
     MaybeWarnAboutUnsafeSdp(session_description_init);
     ReportSetSdpUsage(SetSdpOperationType::kSetRemoteDescription,
@@ -1534,6 +1541,7 @@ ScriptPromise RTCPeerConnection::setRemoteDescription(
           WebFeature::
               kRTCPeerConnectionSetRemoteDescriptionLegacyNoFailureCallback);
   }
+  BRAVE_RTC_PEER_CONNECTION
 
   if (CallErrorCallbackIfSignalingStateClosed(signaling_state_, error_callback))
     return ScriptPromise::CastUndefined(script_state);
